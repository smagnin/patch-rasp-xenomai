diff -Naur '--exclude-from=pattern' linux-rpi-4.1.y/arch/arm/mach-bcm2708/bcm2708.c linux-rpi-4.1.y-patch/arch/arm/mach-bcm2708/bcm2708.c
--- linux-rpi-4.1.y/arch/arm/mach-bcm2708/bcm2708.c	2016-04-14 18:45:41.000000000 +0200
+++ linux-rpi-4.1.y-patch/arch/arm/mach-bcm2708/bcm2708.c	2016-05-22 10:17:43.543556759 +0200
@@ -38,6 +38,8 @@
 #include <linux/gpio/machine.h>
 #include <linux/w1-gpio.h>
 #include <linux/pps-gpio.h>
+#include <linux/ipipe.h>
+#include <linux/ipipe_tickdev.h>

 #include <linux/version.h>
 #include <linux/clkdev.h>
@@ -160,6 +162,10 @@
 /* The STC is a free running counter that increments at the rate of 1MHz */
 #define STC_FREQ_HZ 1000000

+#define SYSTEM_CLOCK_FREQ_HZ 250000000
+
+#define ARM_TIMER_FREQ_HZ SYSTEM_CLOCK_FREQ_HZ
+
 static inline uint32_t timer_read(void)
 {
 	/* STC: a free running counter that increments at the rate of 1MHz */
@@ -1015,12 +1021,26 @@
 	return 0;
 }

+static inline void bcm2708_timer_ack(void)
+{
+	writel(1 << 3, __io_address(ST_BASE + 0x00));	/* stcs clear timer int */
+}
+
+#ifdef CONFIG_IPIPE
+static struct ipipe_timer bcm2708_itimer = {
+	.irq = IRQ_TIMER3,
+	.ack = bcm2708_timer_ack,
+};
+#endif
+
 static struct clock_event_device timer0_clockevent = {
 	.name = "timer0",
 	.shift = 32,
 	.features = CLOCK_EVT_FEAT_ONESHOT,
 	.set_mode = timer_set_mode,
 	.set_next_event = timer_set_next_event,
+#ifdef CONFIG_IPIPE
+	.ipipe_timer    = &bcm2708_itimer,
+#endif /* CONFIG_IPIPE */
 };

 /*
@@ -1030,7 +1050,11 @@
 {
 	struct clock_event_device *evt = &timer0_clockevent;

-	writel(1 << 3, __io_address(ST_BASE + 0x00));	/* stcs clear timer int */
+	//writel(1 << 3, __io_address(ST_BASE + 0x00));	/* stcs clear timer int */
+	if (!clockevent_ipipe_stolen(evt))
+		bcm2708_timer_ack();
+
+	__ipipe_tsc_update();

 	evt->event_handler(evt);

@@ -1043,6 +1067,39 @@
 	.handler = bcm2708_timer_interrupt,
 };

+
+#ifdef CONFIG_IPIPE
+static struct __ipipe_tscinfo tsc_info = {
+	.type = IPIPE_TSC_TYPE_FREERUNNING,
+	.u = {
+		{
+			.mask = 0xffffffff,
+		},
+	},
+};
+
+static void bcm2708_xenomai_tsc_init(void)
+{
+#ifdef CONFIG_PM
+	tsc_info.freq = STC_FREQ_HZ;
+	tsc_info.counter_vaddr = (unsigned long)__io_address(ST_BASE + 4);
+	tsc_info.u.fr.counter = (unsigned *)(ST_BASE + 4);
+#else
+	/*
+	 * Start the ARM timer
+	 */
+	unsigned int control_reg = TIMER_CTRL_ENAFREE | TIMER_CTRL_DBGHALT |
+		TIMER_CTRL_32BIT;
+	writel(control_reg, __io_address(ARM_T_CONTROL));
+
+	tsc_info.freq = ARM_TIMER_FREQ_HZ;
+	tsc_info.counter_vaddr = (unsigned long)__io_address(ARM_T_FREECNT);
+	tsc_info.u.fr.counter = (unsigned *)(ARMCTRL_TIMER0_1_BASE + 0x20);
+#endif /* CONFIG_PM */
+	__ipipe_tsc_register(&tsc_info);
+}
+#endif /* CONFIG_IPIPE */
+
 /*
  * Set up timer interrupt, and return the current time in seconds.
  */
@@ -1075,6 +1132,9 @@
 	clockevents_register_device(&timer0_clockevent);

 	register_current_timer_delay(&bcm2708_delay_timer);
+
+#ifdef CONFIG_IPIPE
+    bcm2708_xenomai_tsc_init();
+#endif
 }

 #if defined(CONFIG_LEDS_GPIO) || defined(CONFIG_LEDS_GPIO_MODULE)
diff -Naur '--exclude-from=pattern' linux-rpi-4.1.y/arch/arm/mach-bcm2708/bcm2708_gpio.c linux-rpi-4.1.y-patch/arch/arm/mach-bcm2708/bcm2708_gpio.c
--- linux-rpi-4.1.y/arch/arm/mach-bcm2708/bcm2708_gpio.c	2016-04-14 18:45:41.000000000 +0200
+++ linux-rpi-4.1.y-patch/arch/arm/mach-bcm2708/bcm2708_gpio.c	2016-05-29 23:34:59.595315877 +0200
@@ -19,6 +19,7 @@
 #include <linux/slab.h>
 #include <mach/gpio.h>
 #include <linux/gpio.h>
+#include <linux/ipipe.h>
 #include <linux/platform_device.h>
 #include <mach/platform.h>
 #include <linux/pinctrl/consumer.h>
@@ -56,7 +57,7 @@
 	 * the GPIO code. This also makes the case of a GPIO routine call from
 	 * the IRQ code simpler.
 	 */
-static DEFINE_SPINLOCK(lock);	/* GPIO registers */
+static IPIPE_DEFINE_SPINLOCK(lock);	/* GPIO registers */

 struct bcm2708_gpio {
 	struct list_head list;
@@ -270,12 +271,16 @@
 	.name = "GPIO",
 	.irq_enable = bcm2708_gpio_irq_unmask,
 	.irq_disable = bcm2708_gpio_irq_mask,
-	.irq_unmask = bcm2708_gpio_irq_unmask,
+#ifdef CONFIG_IPIPE
+    .irq_ack = bcm2708_gpio_irq_mask,
+    .irq_mask_ack = bcm2708_gpio_irq_mask,
+#endif
+    .irq_unmask = bcm2708_gpio_irq_unmask,
 	.irq_mask = bcm2708_gpio_irq_mask,
 	.irq_set_type = bcm2708_gpio_irq_set_type,
 };

-static irqreturn_t bcm2708_gpio_interrupt(int irq, void *dev_id)
+static void bcm2708_gpio_interrupt(unsigned int irq, void *dev_id)
 {
 	unsigned long edsr;
 	unsigned bank;
@@ -290,26 +295,20 @@

 		for_each_set_bit(i, &edsr, 32) {
 			gpio = i + bank * 32;
+			ipipe_handle_demuxed_irq(gpio_to_irq(gpio));
 			/* ack edge triggered IRQs immediately */
 			if (!(level_bits & (1<<i)))
 				writel(1<<i,
 				       __io_address(GPIO_BASE) + GPIOEDS(bank));
-			generic_handle_irq(gpio_to_irq(gpio));
 			/* ack level triggered IRQ after handling them */
 			if (level_bits & (1<<i))
 				writel(1<<i,
 				       __io_address(GPIO_BASE) + GPIOEDS(bank));
 		}
 	}
-	return IRQ_HANDLED;
+	return;
 }

-static struct irqaction bcm2708_gpio_irq = {
-	.name = "BCM2708 GPIO catchall handler",
-	.flags = IRQF_TIMER | IRQF_IRQPOLL,
-	.handler = bcm2708_gpio_interrupt,
-};
-
 static void bcm2708_gpio_irq_init(struct bcm2708_gpio *ucb)
 {
 	unsigned irq;
@@ -319,12 +318,12 @@
 	for (irq = GPIO_IRQ_START; irq < (GPIO_IRQ_START + GPIO_IRQS); irq++) {
 		irq_set_chip_data(irq, ucb);
 		irq_set_chip_and_handler(irq, &bcm2708_irqchip,
-					 handle_simple_irq);
+					 handle_level_irq);
 		set_irq_flags(irq, IRQF_VALID);
 	}

-	bcm2708_gpio_irq.dev_id = ucb;
-	setup_irq(IRQ_GPIO3, &bcm2708_gpio_irq);
+	//bcm2708_gpio_irq.dev_id = ucb;
+	irq_set_chained_handler(IRQ_GPIO3, &bcm2708_gpio_interrupt);
 }

 #else
diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 56f2be8..bcb1e14 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -1031,7 +1031,7 @@ config IPIPE_ARM_KUSER_TSC
        bool
        select GENERIC_TIME_VSYSCALL
        select IPIPE_HAVE_HOSTRT if IPIPE
-       default y if ARCH_AT91 || ARM_TIMER_SP804 || ARCH_MXC || ARCH_OMAP || PLAT_PXA || PLAT_S3C24XX || ARCH_SA1100
+       default y if ARCH_AT91 || ARM_TIMER_SP804 || ARCH_MXC || ARCH_OMAP || PLAT_PXA || PLAT_S3C24XX || ARCH_SA1100 || ARCH_BCM2708
 endif

 source arch/arm/mm/Kconfig
